package com.sms.boot;

import static org.junit.jupiter.api.Assertions.*;

import java.beans.Transient;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpSession;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.event.TransactionalEventListener;
import org.springframework.web.context.WebApplicationContext;

@ExtendWith(SpringExtension.class)
@SpringBootTest(classes={Application.class})
@WebAppConfiguration
class CalenderControllerTest {

    @Autowired
    private WebApplicationContext wac;

    private MockMvc mvc;
    private MockHttpSession session;
    
    @BeforeEach
    public void setupMockMvc(){
        mvc = MockMvcBuilders.webAppContextSetup(wac).build();
//    	mvc = MockMvcBuilders.standaloneSetup(new CalenderController()).build();
//        session = new MockHttpSession();
//        session.setAttribute("UserId", 1);
    }
	

//	@Test
//	@DisplayName("getAllEventTest")
//    public void getAllEvent() throws Exception {
//        mvc.perform(MockMvcRequestBuilders.get("/calender/showAllevent/1")
//                    .contentType("text/html")
//                    .accept(MediaType.APPLICATION_JSON)
//            )
//           .andExpect(MockMvcResultMatchers.status().isOk())
////           .andExpect(MockMvcResultMatchers.jsonPath("$.userId").value(1))
////           .andExpect(MockMvcResultMatchers.jsonPath("$.eventTitle").value("assignment"))
//           .andDo(MockMvcResultHandlers.print());
//
//    }
	
	@Test
	@DisplayName("deleteEventTest")
	@Transactional
	public void deleteEvent() throws Exception {
        mvc.perform(MockMvcRequestBuilders.delete("/calender/deleteEvent/4")
                .contentType("text/html")
                .accept(MediaType.APPLICATION_JSON)
        )
       .andExpect(MockMvcResultMatchers.status().isOk())
       .andDo(MockMvcResultHandlers.print());
		
	}
	

}
